#summary Groovy

= Introduction =

Random thoughts about using Groovy to write a code generator for Crank.

= Details =

I am new to Groovy. I a have been putting it off for two things: good IDE support, and support for Java 5 features like Generics and Enums. Well JetBrains has a great plugin for Groovy and Groovy 1.5 has the Java 5 features so here I am. 

The IDEA plugin for Groovy is excellent. It provides code completion in areas that I would think were not possible. (The last time I tried the Groovy Eclipse plugin, I was majorly dissappointed, and after my recent "Thanks Zed" blog, I learned that IDEA had a great groovy plugin.)

I have played around with Groovy before but still consider myself a complete novice. Here is what I have come up with so far (by just fooling around):

{{{
package com.arcmind.codegen

class Table {
    String name    

}
}}}

The above defines a Java class called Table with a name property with a getter and setter.

Here is a little JDBC utility class that uses a closure:

{{{
package com.arcmind.codegen
import java.sql.*;

class JdbcUtils {
    String url
    String driver
    String userName
    String password

    def execute(callme) {
        Class.forName(driver);
        Connection connection = DriverManager.getConnection(url,userName,password);
        try {
            callme(connection);
        }   catch (SQLException sqe) {
            throw new RuntimeException(sqe);
        } finally {
            connection.close();
        }
        
    }
}

}}}

I thought about using Groovy's GSQL but did not know how to access the database metadata from GSQL.

Now I use the two classes to read the metadata (table name at this point) as follows:

{{{
package com.arcmind.codegen
import java.sql.*;

class DataBaseMetaDataReader {
    List <Table> tables = []
    static main (args) {
        DataBaseMetaDataReader reader = new DataBaseMetaDataReader()
        JdbcUtils jdbcUtils = new JdbcUtils();
        jdbcUtils.url = "jdbc:mysql://localhost:3306/crank_crud?autoReconnect=true"
        jdbcUtils.userName = "crank"
        jdbcUtils.password =  "crank"
        jdbcUtils.driver = "com.mysql.jdbc.Driver"
        
        jdbcUtils.execute ({ Connection connection ->
               def resultSet = connection.metaData.getTables (null, null, null, null)
               while(resultSet.next()) {
                   Table table = new Table()
                   table.name = resultSet.getString ("TABLE_NAME")
                   reader.tables << table
               }
        });

        reader.tables.each {Table table ->
            println table.name
        }

    }
}
}}}

=== Creating another closure for iteration and using Groovy-style constructors ===


I figured there was a built-in way to use closures with ResultSet but could not find it. If someone can point to a more groovy way to get database metadata, let me know.

I took another swipe at it to add my own groovyness as follows:

{{{
package com.arcmind.codegen
import java.sql.*;

class JdbcUtils {
    String url
    String driver
    String userName
    String password

    def execute(callme) {
        Class.forName(driver);
        Connection connection = DriverManager.getConnection(url,userName,password);
        try {
            callme(connection)
        }  finally {
            connection.close()
        }
        
    }

    def iterate(ResultSet resultSet, callme) {
        try {
            while (resultSet.next()) {
                callme(resultSet)
            }
        } finally {
            resultSet.close()
        }

    }
}

}}}

Notice I added the iterate method that takes a closure. Now we use the closure and tried to make the code more groovy by using the property setters in the constructor call.

{{{
package com.arcmind.codegen
import java.sql.*;

class DataBaseMetaDataReader {
    List <Table> tables = []
    static main (args) {
        DataBaseMetaDataReader reader = new DataBaseMetaDataReader()
        JdbcUtils jdbcUtils = new JdbcUtils(url:"jdbc:mysql://localhost:3306/crank_crud?autoReconnect=true",
                userName:"crank", password:"crank", driver:"com.mysql.jdbc.Driver");

        jdbcUtils.execute ({ Connection connection ->
               jdbcUtils.iterate(connection.metaData.getTables (null, null, null, null),
                       { ResultSet resultSet ->
                         Table table = new Table()
                         table.name = resultSet.getString ("TABLE_NAME")
                         reader.tables << table
                       }
               )
        });

        reader.tables.each {Table table ->
            println table.name
        }

    }
}
}}}

So far I am not sure that Groovy has helped me much yet. I could have done the above in Java but faster. Mainly because I don't know Groovy yet. The code is much shorter. Later I need to use the Groovy CLI and Groovy templates. I thinnk Groovy will be a good fit for code generation for Crank. I will try to write my experiences as I go.