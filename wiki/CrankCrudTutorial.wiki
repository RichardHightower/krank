#summary Crank Crud Tutorial

= Introduction =

There comes a time when writing a framework when you must explain to others how to use a framework. This is that time.

Crank CRUD is part of the Crank project. It allows one to quickly create (C)reate-(R)ead-(U)pdate-(D)elete (CRUD) listings. 

The Crank CRUD that currently works builds on top of JSF, Facelets, Spring and JPA. Many of the base classes of Crank CRUD do no rely on JSF or Spring or JPA so in theory it could be ported to other technology stacks (Spring MVC, JSP tagfiles, iBatis, EJB3, etc.). For this tutorial we will focus on JSF, Facelets, Spring and JPA.

The JSF/Facelets support makes heavy use of Ajax4JSF so the forms and listings are Ajax enabled with no additional effort. This includes text auto completion, Ajax pagination, master detail managment, etc.

Speaking of master detail managment, Crank provides support to work with object relationships via master detail forms, drop down support, text completion support and more.

Instead of trying to explain these features, let's demonstrate how to use them. Working sample code is always better than a verbose description.

== Crank CRUD Tutorial ==

To start using Crank CRUD run its maven archetype. You can find directions to run the maven archetype here (CrankCrudMavenArchetype) (note this does not exist yet). Or you could use the sample project as a starting point. The sample project is called crank-crud-webapp-sample and it can be found in the svn repository. 

== Configuration ==


Crank Crud uses the Spring Java configuration module. If you have not used the Spring Java configuration module and you are a Spring user (and who isn't these days), then you must give Spring Java configuration a try. It allows you have the benefits of Spring without all of the hassle of XML.


First we must register an Configuration object.

====Setting up CrankCrudExampleApplicationContext====
{{{
@Configuration (defaultLazy=Lazy.TRUE)
public abstract class CrankCrudExampleApplicationContext extends CrudJSFConfig {
}}}


Notice that the configuration object uses the `@Configuration` annotation (`org.springframework.config.java.annotation.Configuration`). The `@Configuration` annotation is from the Spring Java configuration module.

Also note that the `CrankCrudExampleApplicationContext` subclasses the `CrudJSFConfig`. The `CrudJSFConfig` configures all of the `crudControllers` (backing beans for data entry forms), `paginators` (backing beans for listings), `selectItemGenerators` (backing beans for drop down and ajax text completion), and JSF `converters` that are needed to make you object model editable. To learn more about the `crudControllers`, `paginators`, `selectItemGenerators` and `converters` see CrankCrudDesignDocs.

To manage an object in a CRUD listing (or as a drop down), you must let the base class CrudJSFConfig know that it exists. You do this by registering the managed objects as follows:

{{{
@Configuration (defaultLazy=Lazy.TRUE)
public abstract class CrankCrudExampleApplicationContext extends CrudJSFConfig {

    private static List<CrudManagedObject> managedObjects;
    
	@Bean (scope = DefaultScopes.SINGLETON)    
    public List<CrudManagedObject> managedObjects() {
    	if (managedObjects==null) {
	    	managedObjects = new ArrayList<CrudManagedObject>();
	        managedObjects.add( new CrudManagedObject(Employee.class, EmployeeDAO.class) );
    	}
    	return managedObjects;
		
	}    
}}}

The above manages registers the Employee.class as a managed object. If you have not defined a DAO yet, then you just pass a null for the second argument of the `CrudManagedObject` as follows:


{{{
@Configuration (defaultLazy=Lazy.TRUE)
public abstract class CrankCrudExampleApplicationContext extends CrudJSFConfig {

    private static List<CrudManagedObject> managedObjects;
    
	@Bean (scope = DefaultScopes.SINGLETON)    
    public List<CrudManagedObject> managedObjects() {
    	if (managedObjects==null) {
	    	managedObjects = new ArrayList<CrudManagedObject>();
	        managedObjects.add( new CrudManagedObject(Employee.class, null) );
    	}
    	return managedObjects;
		
	}    
}}}

Note the `new CrudManagedObject(Employee.class, null)` replaces the `new CrudManagedObject(Employee.class, EmployeeDAO.class)`. If you do not pass a DAO then a GenericJpaDAO will be created for you. See UsingDAO for more details.

Once the Employee object is managed then we can create a listing for it as follows (listing.xhtml):

====/webapp/pages/crud/employee/listing.xhtml====
{{{
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
	xmlns:c="http://java.sun.com/jstl/core"
	xmlns:crank="http://www.googlecode.com/crank"
	xmlns:t="http://myfaces.apache.org/tomahawk">
	
<ui:composition template="/templates/layout.xhtml">
	<ui:define name="content">
		<c:set var="crud" value="${cruds.employee.controller}"/>

		<crank:crudBreadCrumb crud="${crud}"/>

	    <span class="pageTitle">Employee Entry</span>
	
		<a4j:form id="employeeForm">
				<crank:form crud="${crud}"
					propertyNames="firstName,lastName,department,description,age,numberOfPromotions"/>

		</a4j:form>
	</ui:define>
</ui:composition>
</html>
}}}

If the above makes no sense at all, then you probably are new to JSF or Facelets or both. If this is the case, before you continue, you are strongly advised to read about JSF and Facelets, check out GettingStartedWithCrank for a list of articles that will get you up to speed with JSF and Facelets (written by the same guy who wrote a fair bit of Crank).

The above uses a page template called /templates/layout.xhtml. Most of the above that we care about is defined in the `content` definiton. Here are the interesting bits:

{{{
		<c:set var="crud" value="${cruds.employee.controller}"/>

		<crank:crudBreadCrumb crud="${crud}"/>

	    <span class="pageTitle">Employee Entry</span>
	
		<a4j:form id="employeeForm">
				<crank:form crud="${crud}"
					propertyNames="firstName,lastName,department,description,age,numberOfPromotions"/>

		</a4j:form>

}}}

Let's step through this step by step. The first line as follows:

{{{
		<c:set var="crud" value="${cruds.employee.controller}"/>
}}}

This pulls the employee CRUD backing bean out of the controller. But you may ask where was `cruds` defined. The cruds object is a `Map` of `JsfCrudAdapter`(s). The `JsfCrudAdapter` has a property called controller which is a `CrudControllerBase`.

The next line defines the bread crumb trail at the top of the page as follows:
{{{
		<crank:crudBreadCrumb crud="${crud}"/>
}}}

Then we define the title for the page: 
{{{
	    <span class="pageTitle">Employee Entry</span>

}}}

Next we use an `a4j:form`:

{{{
		<a4j:form id="employeeForm">
				...
		</a4j:form>

}}}

The `a4j:form` is from the Ajax4JSF project. It allows you to send ajax requests from the JSF form. This will allow us to have master detail section on the form, etc.