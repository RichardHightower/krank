#summary Crank Crud Design Documentation

= Introduction =

Covers the basic structure of Crank Crud. At least the CRUD controller parts, namely pagination and CRUD operations.

== CRUD Controller Design Details ==

The `CrudController` class is the controller for forms that edit entities (domain objects like Department, Employee, etc.). `DetailCrudController` class is the controller for editing details. Think of `DetailCrudController` as the "detail" in Master detail. `CrudController` has a map of `DetailController`s. For example a `CrudContoller` might be tied to a `Department` entity class. The `Department` form may allow editing of `employees` on the `Department` form. Thus the `Department` `CrudController` would have an employees (map key = `employees`) `DetailController` associated with it. `CrudControllerBase` is the code that is used by both `CrudController` and `DetailController`.

To visualize what we are talking about, look at the following diagram:

http://krank.googlecode.com/svn/code/trunk/validation/docs/images/master_detail_pic.jpg

Notice that the `Department` object (managed in JPA) is a parent of the `Employee`s list. 
An `Employee` is being edited, and it has a list of tasks.
Thus `Department` has employees, and an `Employee` has tasks.

The `CrudController` class implements the `CrudOperation`s interface. The `CrudOperation`s interface defines a composition pattern structure. A master detail page is backed by a `CrudController` that can have `DetailControllers` which in turn can have `DetailControllers` which in turn can have `DetailControllers` ad infinitum.

None of the above is tied to Spring MVC or JSF. You can use the above with any GUI front-end especially with those that use expression binding languages like JSF EL and OGNL.

====UML diagram for CRUD controller classes:====

http://krank.googlecode.com/svn/code/trunk/validation/docs/images/master_detail.png

It may be best to visualize the relationship of controllers with this picture:

====Controller to Master Detail form elements:====

http://krank.googlecode.com/svn/code/trunk/validation/docs/images/master_detail_pic_controlle_mapping.jpg

== CRUD Pagination Design Details ==

Crank CRUD also supports building paginatable, filterable listings. You can sort by any field/property (`Employee.firstName`, `Employee.dob`) or any relationship field/property (`Employee.department.name`, `Employee.address.zip`). Much of this is accomplished through the use of the Crank Criteria API. The Crank CRUD uses the Crank Criteria API extensively. Below is a picture that shows what a typcial listing might look like:

====Typical Crank Listing:====
http://krank.googlecode.com/svn/code/trunk/validation/docs/images/paginated_filterable_listing.jpg

The listing equates to the following features:

====Feature map:====
http://krank.googlecode.com/svn/code/trunk/validation/docs/images/paginated_filterable_listing_feature_map.jpg

Let's go over the classes and interfaces that make up the filterable, paginatable Crank listings. `Pageable` is the interface for controllers that provide pagination. The `Paginator` is a concrete class that provides pagination support. Again, `Pageable` is not tied to JSF, Spring MVC or Struts. `Pageable` as all classes discussed so far can in theory be used by JSF, Spring MVC, Struts, Swing, etc.

`FilterablePageable` is an interface that controllers implement if they are going to provide pagination and filtering.

`FilteringPaginator` is a controller that extends the `Paginator` class and adds filtering. A `FilteringPagnator` has a list of `FilterableProperty` instances. 

Each `FilterableProperty` instance has an `OrderBy` and `Comparison` associated with it (from the [http://code.google.com/p/krank/wiki/UsingDAO Criteria DSL support]). When the value of `OrderBy` or `Comparison` changes they fire events that the `FilteringPaginator` captures. Once the `FilteringPaginator`, receives events from the `Comparison` or `OrderBy` objects it reprocesses the listing.


There is a `FilterableProperty` for each property of the Entity. The `FilterableProperty` consist of a `Comparison` object and an `OrderBy` object. The `Comparison` object and an `OrderBy` object are from our Crank Criteria DSL. (In actuality `FilterableProperty` works with `OrderByWithEvents`, `BetweenComparisonWithEvents` and `ComparisonWithEvents` which subclass `OrderBy`, `BetweenComparison` and `Comparison` from the [http://code.google.com/p/krank/wiki/UsingDAO Criteria DSL support] and add change notification event handling.)

====UML diagram for Pagination and Filtering Controller classes:====

http://krank.googlecode.com/svn/code/trunk/validation/docs/images/pagination.png

It may help to tie some of these controllers back to the listing picture as follows:

====Controller map for pagination:====
http://krank.googlecode.com/svn/code/trunk/validation/docs/images/paginated_filterable_listing_mappings.jpg
