#summary Updating Listing Controller to Allow Entity Joins

=== Problem ===

Let's say we have classes as follows:

{{{
//inquiries
class Inquiry
class PetStoreInquiry extends Inquiry has property a
class PetClinicInquiry extends Inquiry has property b

//leads
class Lead has an Inquiry (one to one)
class PetStoreLead extends Lead
class PetClinicLead extends Lead
}}}

The question is while searching for `PetStoreLead`s how do you access properties of the inquiry subclass?

This query drives JPA(Hibernate) wild and causes an error:

{{{
SELECT lead FROM PetStoreLead lead WHERE lead.inquiry.a='a'
}}}

The error you get is that `lead.inquiry` does not have a property called `a`.
The problem is that `Inquiry` does no have a property `a`, its subclass `PetStoreInquiry` does. (We are using joined subclasses different mapping like class hierarchy in the same table seem to work.)

One possible solution to the above is to rewrite the query as:

{{{

        SELECT lead 
        FROM PetStoreLead lead, PetStoreInquiry inquiry 
        WHERE inquiry.a='a' AND lead.inquiry=inquiry
}}}

There might be a better way. If there is, please share it.

=== Proposed update ===

I added support for entity joins in the Crank Criteria DSL. The trick is to use those enity joins from the `FilterablePageable` controller.

{{{
public interface FilterablePageable extends Pageable {
    Map<String, FilterableProperty> getFilterableProperties();
    void filter();
    void clearAll();
    boolean isSorting();
    boolean isFiltering();
    void disableSorts();
    void disableFilters();
    Class getType();
    void addCriterion(Criterion criterion);
    List<Criterion> getCriteria();
    void addFilteringListener(FilteringListener listener);
    void removeFilteringListener(FilteringListener listener);
    void addOrderBy(OrderBy orderBy);
    /* List of Joins can be Fetch, Join or Entity Join. */
    List<Join> getJoins();
    void setJoins(List<Join> joins);

    /* New Method */
    void addSelect(Select select);


    @Deprecated
    List<Join> getFetches();
    @Deprecated
    void setFetches(List<Join> fetches);
}
}}}

We need to add a class to represent the item we are selecting (pseudo code).
{{{
class Select {
   boolean distinct;
   String name; //must be an alias entity join
}
}}}

We need an extra property added to `FilterableProperty`

{{{
public class FilterableProperty implements Serializable, Toggleable {
    public Comparison comparison;
    public OrderByWithEvents orderBy;
    private Class type;
    private boolean useAlias; //new property
...//setter / getter removed
}}}