#summary CodeGen Crank/Presto code generator

I have been fairly steady working on the CodeGen project. Due to the wonders of open source, I have received some help in improving the Swing GUI. Thanks Alex.

I had some issues creating the archetype. I had to rename the packages of the sample app (sample app is at svn https://krank.googlecode.com/svn/crank-examples/crank-example) so that they would not collide with crank package names, otherwise, the maven archetype tool mangled the living snot out of my library imports.

I've created the following generators (since last I wrote about this):

 * *FacesConfigCodeGen* (edits an faces-config to add entries for CRUD pages)
 * *SpringJavaConfigCodeGen* (edits a Spring Java Config file to add CRUD controllers)
 * *XHTMLCodeGenerator* (generates XHTML/Facelets pages for Listings and forms)
 * *JPACodeGenerator* (Generates JPA Model classes)

The above all have unit tests, but only *JPACodeGenerator* generated code and been tested in a running application. *FacesConfigCodeGen*, *SpringJavaConfigCodeGen*, and *XHTMLCodeGenerator* have not been wired into the Swing GUI yet. Each took about a day to write and test.

They all work with ManyToOne, OneToMany, and ManyToMany relationships, in otherwords, they generate all the GUI needed for editing/managing these relationships. I have not added support for OneToOne (Crank/Presto2 supports it, but the generation does not).

I also greatly improved the JPACodeGenerator. It took quite a few passes to get it right, but I was going for perfection. (I hate crappily generated code with a lot of spurious unused imports and weird formatting)

The plan for today is to create an archetype, change the code generator to be aware of a maven project structure. Then use the archetype to create a new project. Point the code generator at the project directory. Configure the code generators programatically to handle the maven project structure. Then integration test the generated code by generating code and testing the webapp.

You can find the code for the code generator at: https://krank.googlecode.com/svn/crank-codegen. Just check it out with svn and provide comments....

{{{
svn co http://krank.googlecode.com/svn/crank-codegen codegen
}}}

====Project notes on using maven archetype support====
The best guide I've seen for creating a maven archetype based on a previous maven project is here: [http://ninomartinez.wordpress.com/2008/09/03/making-a-maven-archetype/ Nino Martinez' guide to making a maven archetype] 

Here I repeat it....

   * Build a project that will act as a template for the archetype
   * run mvn archetype:create-from-project , from the project folder
   * Edit the generated archetype ( placed in target/generated-sources/archetype ), it might not pickup on everything that needs to be substituted.
   * From target/generated-sources/archetype of the project template run mvn install
   * Try the archetype yourself by running mvn archetype:generate -DarchetypeCatalog=local from a fresh directory
   * Repeat the process until satisfied

Before I started this, I made crank-example (svn http://krank.googlecode.com/svn/crank-examples/crank-example) a standalone sample (it does not inherit from any crank pom). 

Here is step 1:
{{{
richard-hightowers-macbook-pro:crank-example richardhightower$ mvn clean
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Crank :: Crud :: Master Example project
[INFO]    task-segment: [clean]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1 second
[INFO] Finished at: Wed Jan 14 13:17:45 PST 2009
[INFO] Final Memory: 8M/490M
[INFO] ------------------------------------------------------------------------
richard-hightowers-macbook-pro:crank-example richardhightower$ mvn archetype:create-from-project
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'archetype'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Crank :: Crud :: Master Example project
[INFO]    task-segment: [archetype:create-from-project] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] Preparing archetype:create-from-project
[INFO] ------------------------------------------------------------------------
[INFO] Building Crank :: Crud :: Master Example project
[INFO] ------------------------------------------------------------------------
[INFO] No goals needed for project - skipping
[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on => 'false'.
[INFO] Setting property: resource.loader => 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound => 'false'.
[INFO] [archetype:create-from-project]
[INFO] Setting default groupId: crank-examples
[INFO] Setting default artifactId: crank-example
[INFO] Setting default version: 1.0.4-SNAPSHOT
[INFO] Setting default package: com.mycompany
[INFO] Archetype created in target/generated-sources/archetype
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Wed Jan 14 13:18:03 PST 2009
[INFO] Final Memory: 15M/490M
[INFO] ------------------------------------------------------------------------
richard-hightowers-macbook-pro:crank-example richardhightower$ 
}}}

Then I copy over to my archetypes folder where I can edit it and inspect it:

{{{
$ pwd
/Users/richardhightower/projects/crank-examples/crank-example

$ mv target/generated-sources/archetype ~/projects/crank-archetypes/crank-example-archetype

}}}