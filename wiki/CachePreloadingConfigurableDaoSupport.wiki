= New Feature!  Preloading Configurable Dao's =

= Introduction =

If you have some static data - or any data you would like to preload into a cache on container startup, Crank now supports this capability through the GenericDao support.


= Details =

Purpose:
	Preloads data into second level cache on container startup (per configuration).  Note that in the current implementation entities MUST be annotated with @Cache to get preloaded/cached.
		(configurable generic dao's now support spring-configured caching setup).
		Tested only with EHCache so far.  EHCache 1.3.0 is required for JMX MBean integration.
	
	Use GenericDaoFactory
	
	Give it some cache configuration.
	{{{
	     <bean id="preloadingEmployeeDao" parent="daoFactory" lazy-init="true">
	        <property name="interface">
	            <value>org.crank.crud.test.dao.EmployeeDAO</value>
	        </property>
	        <property name="bo">
	            <value>org.crank.crud.test.model.Employee</value>
	        </property>
	        <property name="cacheConfiguration">
	            <bean class="org.crank.crud.cache.CacheConfiguration">
	                <property name="preloadingRecordCount" value="10" />
	            </bean>
	        </property>
	    </bean>
	}}}
	It will get instanced as a PreloadableCacheableGenericDao rather than a standard GenericDao.
	
	From the above example, PreloadableCacheableGenericDao will load up the first ten records existing in the table the Employee pojo is mapped to.  Many other cache configuration options are available.
	
	You can also configure the preload with some JQL.
	{{{
        <property name="cacheConfiguration">
            <bean class="org.crank.crud.cache.CacheConfiguration">
                <property name="preloadingHQL" value="from Employee e where e." />
            </bean>
        </property>
	}}}
	
	EHCache support
		To use with ehcache, you must configure your persistence.xml to use ehcache:
{{{
	<property name="hibernate.cache.provider_configuration_file_resource_path" value="org/crank/crud/cache/spring/crank-test-ehcache.xml" />
        <property name="hibernate.cache.provider_class" value="org.hibernate.cache.EhCacheProvider" />
        <property name="hibernate.cache.use_second_level_cache" value="true" />
}}}            
        You will need a cache service entry in a context file, and utilize the EHCacheManagerFactoryBean.
{{{
	<bean id="ehCacheService" class="org.crank.crud.cache.EHCacheService">
	    <property name="setupMBeans" value="true" />
	</bean>
}}} 			
			

  # TODO: Programatically create cache if no cache exists (meaning cache annotation was not available)
  # TODO: Inspect POJO for @Cache annotation and overloaded cache name. (is this all hibernate specific?) 
  # TODO: What to do if pojo has  @Cache annotation, and a cache name is specified that conflicts with the annotated cache name overload?
	
	









