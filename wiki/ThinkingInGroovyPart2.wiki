#summary Working on a CodeGenerator in Groovy

= Introduction =

You may recall [http://code.google.com/p/krank/wiki/ThinkingInGroovy ThinkingInGroovy] where I shared some experience playing around with Groovy. Well I recently got some funding to work on the code generator again. I dusted off the prototype that I wrote before and start hacking on it again.

This is my fourth code generator. The first code generator that I wrote was at Intel and it was done in JPython. Then a few years later I was at eBlox and wrote a code generator in Jython. Then whilst working at a contract for a big mobile telecom company, I wrote a code generator in Java as a Maven Mojo. (The templates were Velocity.)

So why Groovy.... Well, I really like Groovy. Groovy has what seems to be the best of Python and Java rolled up into a language and syntax that I love. Groovy is what I wished Jython could have been. Note this is a matter of opinion and I am not trying to start a flame war with the Python folks. I still love Python and love programming with it. I just prefer Groovy.

I have poured through the Groovy pragmatic books in hopes to fully utilize the Groovy language and I am doing this write up to see how close I have come to writing "Groovy code".

One area where I have chosen to be less Groovy is in making my methods and closures for the most part strongly typed. I have bad memories of really large Jython/JPython projects that I worked on getting out of hand with regards to typing issues. I like the self documenting nature of declaring methods that take typed arguments. It also helps the IDE give me code completion. So I unapologetically use types in many cases where a more "groovy" programmer would not.

This is a very earlier copy of this project and essentially works well enough to reverse engineer a JPA object model from a database table. I plan on adding Maven Plugin support and a Swing based GUI. Also I plan on adding features like adding classes and relationships from the command line and Swing GUI (even if they do not exist in the database yet).

This code will one day be the basis of code generation support for the Crank and Presto projects.

I have utilized some of the following Groovy language features:

 # Dynamic property access
 # XML writing via builder support
 # XML reading via GPath support
 # Custom closure creating for IoC for doing code cleanup
 # AOP style method decoration for logging via Groovy metaClass, expando support

==Classes in the codegen project==


I would like to start with a brief overview of the classes involved and then discuss some of the Groovy language features that made this project a joy to write.

== Model classes ==
There are a series of model object to represent Java classes, properties and relationships as well as tables, keys, and columns.

Here are the model objects for database tables and Java classes.

|| Class Name || Purpose ||
||      Table       ||    Represents data about a table in a database       || 
||      Key       ||      Represents data about keys in a table (imported and exported)      || 
||      Column       ||    Represents data about a column in a table       || 
||      JavaClass       ||   Represents data about a Java class and how it is mapped to a Table       || 
||      JavaProperty       ||   Represents data about a Java property and how it is mapped to a database column        || 
||      Relationship       ||     Represents data about how Java classes are related      || 





|| Class Name || Purpose ||
|| CodeGenMain           ||   The main entry point into the command line version of the codegen application. Processes command line arguments and reads properties file used to configure application. Configure the other classes and performs injection of collaborators.      || 
||  JdbcUtils          ||  Utility class for working with low-level JDBC connections and ResultSets.       || 
||            ||         || 
||            ||         ||  
||            ||         || 