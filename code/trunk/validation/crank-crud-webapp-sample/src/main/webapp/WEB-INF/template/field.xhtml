<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:ui="http://java.sun.com/jsf/facelets" 
      xmlns:h="http://java.sun.com/jsf/html" 
      xmlns:f="http://java.sun.com/jsf/core" 
      xmlns:arc="http://www.arc-mind.com/jsf/core" 
      xmlns:c="http://java.sun.com/jstl/core"
	  xmlns:fn="http://java.sun.com/jsp/jstl/functions"   
      xmlns:t="http://myfaces.apache.org/tomahawk"
	  xmlns:crank="http://www.googlecode.com/crank"	
	  xmlns:crud="http://www.googlecode.com/crank/crud"
	  xmlns:validation="http://code.google.com/p/krank/validation"
      >

  <ui:composition>

	<c:if test="empty type">
		    <c:set var="type" value="${crud.entityClass}" />
	</c:if>
	
	<c:if test="${empty formLabelStyleClasses}">
	    <c:set var="formLabelStyleClasses" value="fieldLabel" />
	</c:if>

	<c:if test="${empty formFieldStyleClasses}">
	    <c:set var="formFieldStyleClasses" value="fieldField" />
	</c:if>

    <c:if test="${empty required}">
        <c:set var="required" value="${crud:isRequired(type,fieldName)}" />
    </c:if>
	
	<c:if test="${empty fieldId}">
		<c:set var="fieldId" value="${daoName}${crud:replace(fieldName,'.','_')}"/>
	</c:if>

    <!--  The label is optional. Generate it if it is missing.  Decorate it if required -->
	<c:choose>
		<c:when test="${false or required=='true' and not crud:isBoolean(type,fieldName)}">
			<c:choose>
				<c:when test="${empty label}">
				    <c:set var="label" value="${crud:createLabel(fieldName)}*" />
				</c:when>
				<c:otherwise>
				    <c:set var="label" value="${label}*" />
				</c:otherwise>
			</c:choose>

		</c:when>
		<c:otherwise>
			<c:if test="${empty label}">
			    <c:set var="label" value="${crud:createLabel(fieldName)}" />
			</c:if>
		</c:otherwise>
	</c:choose>

   <h:outputLabel id="${fieldId}Label" value="${label}" for="${fieldId}" styleClass="${formLabelStyleClasses}"/>

	<c:choose>
		<c:when test="${crud:contains(fieldName, '.')}">
			<c:set var="simpleType" value="${false}"/>
			<c:set var="complexProps" value="${crud:splitProperty(fieldName)}" />
			<c:set var="counter" value="0"/>
			<c:forEach items="${complexProps}" var="cProp">
				<c:if test="${counter == 0}">
					<c:set var="complexEntity" value="${cProp}"/>
				</c:if>
				<c:if test="${counter == 1}">
					<c:set var="complexProp" value="${cProp}"/>
				</c:if>
				<c:set var="counter" value="${counter + 1}"/>
			</c:forEach>
			${complexEntity}.${complexProp}
			<!--
			<crank:compositePanel entity="${entity[complexEntity]}" name="${complexEntity}" propertyNames="${complexProp}"/>
			-->
		</c:when>
		<c:otherwise>
			<c:set var="simpleType" value="${true}"/>
		</c:otherwise>
	</c:choose>
	
	<c:if test="${simpleType}">
    <c:if test="${crud:isText(type,fieldName)}">
		<c:choose>
			<c:when test="${crud:isLargeText(type,fieldName)}">
			    <h:inputTextarea id="${fieldId}" 
			                     value="#{entity[fieldName]}" 
			                     required="${required}" 
			                     styleClass="${formFieldStyleClasses}"
			                     cols="50" rows="${crud:textSize(type,fieldName)/50}">
			        <validation:validateBasedOnMetaData id="${fieldId}Validator" formClass="${type}" fieldName="${fieldName}"/>
					<c:if test="${crud:textSize(type,fieldName)>0}">
						<f:validateLength maximum="${crud:textSize(type,fieldName)}" />
					</c:if>
				</h:inputTextarea>
			</c:when>
			<c:otherwise>
			   <h:inputText id="${fieldId}" 
			                     value="#{entity[fieldName]}" 
			                     required="${required}" 
			                     styleClass="${formFieldStyleClasses}">
					<validation:validateBasedOnMetaData id="${fieldId}Validator" formClass="${type}" fieldName="${fieldName}" />
					<c:if test="${crud:textSize(type,fieldName)>0}">
						<f:validateLength maximum="${crud:textSize(type,fieldName)}" />
					</c:if>
				</h:inputText>
			</c:otherwise>
	   </c:choose>
    </c:if>
	</c:if>
	
	<c:if test="${simpleType}">
	<!--  If the value binding is a boolean, display a
           selectBooleanCheckbox field. -->
    <c:if test="${crud:isBoolean(type,fieldName)}">
	   <h:selectBooleanCheckbox  id="${fieldId}" 
						 value="#{entity[fieldName]}"
						 onclick="${onclick}" 
						 required="${required}" 
						 styleClass="fieldSelectBooleanCheckbox">
		</h:selectBooleanCheckbox>
	</c:if>
	</c:if>
	
	<c:if test="${simpleType}">
    <!--  If the value binding is a date, 
          display a t:inputDate field. -->
    <c:if test="${crud:isDate(type,fieldName)}">
		<t:calendar id="${fieldId}" renderPopupButtonAsImage="true" 
	                   renderAsPopup="true" value="#{entity[fieldName]}" 
	                   required="${required}"
	                   styleClass="${formFieldStyleClasses}">
			<validation:validateBasedOnMetaData id="${fieldId}Validator" formClass="${type}" fieldName="${fieldName}"/> 
	        <ui:insert />
		</t:calendar>
	</c:if>
	</c:if>
	
	<c:if test="${simpleType}">
    <c:if test="${crud:isManyToOne(type,fieldName)}">
        <c:set var="propEntityName" value="${crud:getPropertyEntityName(type,fieldName)}" />
		<crud:select id="${fieldId}" value="#{entity[fieldName]}">
			<validation:validateBasedOnMetaData id="${fieldId}Validator" formClass="${type}" fieldName="${fieldName}"/> 
			<f:selectItems value="${selectItemGenerators[propEntityName].list}" />
			<f:converter converterId="" binding="${converters[propEntityName]}"/>
		</crud:select>
    </c:if>
	</c:if>
	
	<c:if test="${simpleType}">
    <c:if test="${crud:isEnum(type,fieldName)}">
        <c:set var="propEntityName" value="${crud:getPropertyEntityName(type,fieldName)}" />
        <h:selectOneMenu id="${fieldId}" value="#{entity[fieldName]}">
			<f:selectItems value="${selectItemGenerators[propEntityName].list}" />
		</h:selectOneMenu>
    </c:if>
	</c:if>
	
	<c:if test="${simpleType}">
    <c:if test="${crud:isFile(type,fieldName)}">
        <c:set var="mapKeyName" value="uploadFile_${fieldName}" />
        <t:inputFileUpload 
        	id="${fieldId}"
            accept="image/*"
  			required="${required}" 
            value="${crud.dynamicProperties[mapKeyName]}"
            storage="file"
            maxlength="${crud:columnSize(type,fieldName)}"/>
    </c:if>
	</c:if>
    <!--  Display any error messages that are found -->
    <h:message id="${fieldId}Msg"
    		   styleClass="fieldMessage"
    		   style="color: red; text-decoration: underline" 
               for="${fieldId}" />

</ui:composition>

</html>

